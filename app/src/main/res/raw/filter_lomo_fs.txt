precision mediump float;
uniform sampler2D sTexture1;
uniform sampler2D sTexture2;
varying vec2 texCoord;

float BlendMultiply(float baseColor, float blendColor) {
    return baseColor * blendColor;
}

float BlendHardLight(float baseColor, float blendColor) {
    if (blendColor < 0.5) {
        return 2.0 * baseColor * blendColor;
    } else {
        return (1.0 - 2.0 * (1.0 - baseColor) * (1.0 - blendColor));
    }
}

void main() {
    vec3 baseColor = texture2D(sTexture1, texCoord).rgb;
    vec3 color = texture2D(sTexture2, texCoord).rgb;
    float r = BlendMultiply(BlendHardLight(baseColor.r, baseColor.r), color.r);
    float g = BlendMultiply(BlendHardLight(baseColor.g, baseColor.g), color.g);
    float b = BlendMultiply(BlendHardLight(baseColor.b, baseColor.b), color.b);
    gl_FragColor = vec4(r, g, b, 1.0);
}